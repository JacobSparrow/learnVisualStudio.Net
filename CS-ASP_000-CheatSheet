Data Types (CS-ASP_007)
=======================
Comments:  // Single line ... /* Multiline */

string => alphanumeric (defaults to "")
int => 2 billion to -2 billion (defaults to 0)
double => fractional value (defaults to 0.0)
bool => true or false (defaults to false)

More: http://is.gd/data_types


Data Type Conversion (CS-ASP_008)
=================================
Implicit conversions - smaller type to larger type
without data loss, "upcasting"

Explicit conversions - require developer intervention,
possibility of data loss, "downcasting", either in 
the form of cast or using a helper method.

Casting numbers:
int myInteger = (int)myDouble;

Numbers to strings:
string myString = myInteger.ToString();

String to Numbers:
int myInteger = int.Parse(myString);

More: http://is.gd/datatype_conversion


Arithmetic Operators (CS-ASP_009)
=================================
= NOT equality, it's assignment

Math Operators: + - * /

Addition Assignment
total = total + 5;
total += 5;

Increment Operator:  i++;
Decrement Operator:  i--;

Beware of order of precedence (use parenthesis)
Beware of down casting (you'll lose precision)
Beware of overflow (user bigger types)

To make overflow throw an exception:

checked 
{
  // some arithmetic operation
  // that could potentially overflow
}

C# Syntax (CS-ASP_010)
======================
Operands - variable names, object / server control 
names, literals - "Nouns" (you name these)

Operators - "Verbs ... they act on the operands.

http://is.gd/operators

Expressions - One or more operands and zero or more 
operators that evaluate to a single value

http://is.gd/expressions

Statements - A complete instruction - assignment of an 
expression to a variable, an increment/ decrement, etc.

http://is.gd/statement

Statements must end in a semi-colon  ;
Whitespace is ignored (use for humans)


Conditional if ... else if ... else Statement (CS-ASP_011)
==========================================================
= Assignment
== Equality

if (a == b)
{
  // execute when the expression is true
}
else
{
  // executes when the expression is false
}

... or ... evaluate other mutually exclusively options:

if (a == b) { // some code }
else if (a == c) { // some code }
else if (a == d) { // some code }
else { // catch all }

CheckBox Server Control = Checked prop is bool

RadioButton Server Control = GroupName prop groups 
them together, check prop is bool


Conditional Ternary Operator (CS-ASP_012)
=========================================
Shortcut for evaluating an expression and
returning a result.
result = (a == b) ? "Equal" : "Not Equal";

Comparison and Logical Operator (CS-ASP_013)
============================================
Comparison Operators
used for conditional statements
==
!= 
< >
<= >=
!someBooleanValue - means NOT is true

Logical Operators
used to combine multiple expressions / evaluation

&& - AND
|| - OR

Combine with parenthesis ( ) for order of precendence


Working with Dates and Times (CS-ASP_014)
=========================================

Creating new DateTime objects
DateTime myDateTime = DateTime.Now;
DateTime myDateTime = DateTime("12/7/1969");

Formatting ... many options:
myDateTime.To_____()

Retrieving Parts:
myDateTime.Year // int
myDateTime.Hour // int
myDateTime.DayOfWeek // "Monday"
myDateTime.DayOfYear // int 175

DateTime Math:
myDateTime.AddHours(3)
myDateTime.AddMinutes(-5)

"Chaining" = using multiple helper methods
together with the dot . operator
myDateTime.AddHours(3).AddMinutes(-5).ToString()


Working with Spans of Time (CS-ASP_015)
=======================================
Create and initialize new TimeSpans

// Days.Hours:Minutes:Seconds.Milliseconds
TimeSpan myTimeSpan = TimeSpan.Parse("1.2:3:30.5");

DateTime myBirthday = DateTime.Parse("12/7/1969");
TimeSpan myAge = DateTime.Now.Subtract(myBirthday);

More info at http://is.gd/timespan

Get individual parts
myAge.Hours
myAge.Seconds

... or get TOTAL elapsed time
as a double representing both
the number of days / hours / etc.
AND fractional values representing
"left overs".

myTimeSpan.TotalDays // double
myTimeSpan.TotalHours // double


Formatting Strings (CS-ASP_019)
===============================
Concenate Strings
+ +=

Format Strings
String.Format("Hello {0}.  You are from {1}", "Bob", "Chicago")

Format Numbers
String.Format("Reference Code: {0:000_000-0}", 1234567)
123_456-7

Formatting Dates
http://is.gd/formattingdates
String.Format("REference Date: {0:ddd - d, MM, yyyy}", someDate)
Tue - 5, 07, 2014

Formatting Currency
http://is.gd/formattingcurrency
String.Format("Total: {0:C}", totalAmount);
$50,000.00


Single Dimensional Arrays (CS-ASP_021)
======================================
Indexes vs. Elements
Accessor vs. Stored Values
Indexes are zero based

Declaring Arrays
string[] myArray = new string[3];

Declaring and Initializing Arrays
string[] myArray = new string[3] { "Moe", "Larry", "Curly" };

Setting / Getting Values
string myString = myArray[1]; // Retrieve the second element
myArray[0] = myString; // Sets first element

Multi-Dimensional Arrays (CS-ASP_022)
=====================================
Same as single dimensional ... just requires
more indexes (in dimensions) to get to the element

double[,] myArray = new double[2,3]; // contains 6 elements
int[,,] rubicsCube = new int[3,3,3] // contains 27 elements

rubicsCube[0,1,2] = 42;
myInteger = rubicsCube[0,1,2];


Changing the Length of an Array (CS-ASP_023)
==============================================
Arrays are immutable = cannot be changed in memory
HOWEVER .NET Framework providers helper methods to
resize an array ... creates a new array and copies
the old values into it.

Array.Resize(ref myArray, myArray.Length + 1);

// Get the highest index:
int highestIndex = myArray.GetUpperBound(0);
// 0 = dimension we want to retrieve the 
// upper boundary for

// Arrays have other helper methods 
myArray.Sum()
myArray.Min()
myArray.Max()
myArray.Average()

Array.Sort(myArray)
Array.Reverse(myArray)


Looping with the for Iteration Statement (CS-ASP_026)
=====================================================

Snippet:  for [tab] [tab]
Then you can tab through the replaceable bits, hit enter to 
start writing code in the code block body.

for (int i = 0; i < 10; i++)
{
  // Your code here
}

i - Any variable name

1st part - counter declaration, can be initialized to any number
2nd part - condition, can be any expression that equates to a bool
3rd part - increment i++ / decrement i--, can step more than 1 using +=,

string[] names = new string[] { "Wolverine", "Cyclops", "Professor X", "Phoenix" };

for (int i = 0; i < names.Length; i++)
{
  // Cna search for a specific value
  if (names[i] == "Professor X")
  {
     // Do something here
     // Can break out of additional iterations if you need to
     break;
  }
}


Looping with the while and do ... while Iteration Statements (CS-ASP_027)
=========================================================================

Random randon = new Random();
// random.Next(lowerBounds, upperBounds)
random.Next(1, 100); // returns a value between 1 and 100

// If someExpression is already false, this will never execute
while(someExpression) {
  // Code that would affect whether
  // someExpression is true or false
}

// If someExpression is already false, this will run AT LEAST ONCE
do {
  // Code that would affect whether
  // someExpression is true or false
} while (someExpression)



Creating Overloaded MEthods (CS-ASP_031)
========================================
Different METHOD SIGNATURE, but same basic function.
METHOD SIGNATURE ... the number and type of parameters
Can have different return types.

Creating Optional Parameters (CS-ASP_032)
=========================================
Optional parameters provide default values when you define
the method.  So, if you don't supply a value, the default
will be used.

private void myMethod(string myRequiredParam,
                     int myOptionalParam = 1,
                     int myOtherOptionalParam = 5);

// Can be called ...

myMethod("Hello Required Param!");

// or ...

myMethod("Hello Required Param!", 100);

// or ... 

myMethod("Hello Required Param!", 100, 500);

// You cannot skip an optional parameter:

myMethod("Hello Required Param!", , 500); // ERROR


Passing Named Arguments Into Input Parameters (CS-ASP_033)
=========================================================
Allow us to send in parameter arugments OUT OF ORDER!
We just previx the input parameter argument with the name
of the parameter we're passing in, a colon, then the value:

myMethod(myOtherOptionalParam: 500,
         myRequiredParam: "Hello Required PAram",
         myOptionalParam: 100);

// You still have to pass in REQUIRED parameters.


Creating Methods with Output Parameters (CS-ASP_034)
=====================================================
Allows you to return a value the normal way AND
return a value via a method parameter:

private bool myMethod(string myRequiredParam,
                      out int myOptionalParam) { }


int myValue = 0;
if (myMethod("Some required text", out myValue)) return "Hello World!";


Manipulating Strings (CS-ASP_035)
=================================

// Escape double quotes
string myString = "This is a double quote: \".";

// Accessing a specific char:
myString[2]

// StartsWith(), EndsWith(), Contains()
// Check to see if a given string has a set of 
// characters beginning, end or somewhere inside.
// Return true / false

// IndexOf()
// Find the index for one string inside of 
// another string.
int myIndex = myString.IndexOf("howdy");

// Insert(), Remove()
// Insert adds characters starting at a given index
// Remove removes characters starting at a given
// index, and all the way through the length you 
// input.

// Substring()
// Retrieve characters beginning at a given index
// all thr way through the length you input.

// Trim(), TrimStart(), TrimEnd()
// Remove space characters both, or just the start
// or the end of the string.

// PadLeft(), PadRight()
// Allow you to specify a length for a string
// and a character to pad the string with if its
// length is less than the specified length.
myString = someValue.PadLeft(10, '#');
// Notice that we're inputting a char, not a string
// therefore we have to use a single quote ' not
// a double quote.

// ToUpper(), ToLower()
// Important!  Compare two strings regardless of
// the case, beacuse in C#, two strings with
// different cases are NOT equal.


// Replace()
// Replace every occurance of one string with
// some other string.
myString.Replace("$$$", myValue);

// Split()
// Take a string and split it into many strings
// and store them in a string array.
string[] names = myString.Split(';');

// Concatenating strings, immutability
// StringBuilder - memory efficient way of concatenating strings.


Introduction to Classes and Objects (CS-ASP_036)
================================================
Class is a code block that defines a data type.
An Object is an instance of a Class.
Metaphors:
Blueprint vs. Houses
Recipe vs. Cupcakes
Pattern vs. Bluejeans
Cookie cutter vs. Cookes

Classes have members, like Properties and Methods.

Properties define the attributes that are set on
an instance of the class / represent the "state" 
of the object.  You can set (assign) and get
(retrieve) properties values on an object.

Methods define actions an instance of a class
can perform, usually on the object instance itself.

You can create an instance of a class using the 
new keyword.  Think: "factory".

You can access the members of an object by using
the member access operator, the dot (.)

Conceptually, classes are dleegated a responsibility
in the system or represent some domain concept
in the system.

Classes are ultimately custom data types, more complex
than the simple data types we've worked with.
Therefore you can use them anywhere you use other
data types (like as input parameters opr return
values from a method.)

class Car {

}

Auto Implemented Properties - simple properties
prop [tab] [tab] [enter] [enter]

this keyword - Access a member ofthe current instance
of the class.

public void MyMethod() 
{
  this.Year = 1976;
}




Creating Class Files, Creating Cohesive Classes and Code Navigation (CS-ASP_037)
================================================================================
Prefer more classes w/ narrowly defined responsibilities
Prefer to put each class in its own file
Prefer high cohesion - similarity / signleness of purpose of the class members
To achieve high cohesion, a rule of thumb: try to make your classes fit on 
one "screen" of your IDE (no scrolling required)


Understanding Object References and Object Lifetime (CS-ASP_038)
================================================================
An object reference variable holds a reference to an instantied object 
in the computer's memory.

MyClass myObject;

The new keyword creates an instanceof the class and returns the addres of 
object in memory to the reference variable.

myObject = new MyClass();

More than one object reference variable can hold an address to the object in memory.

MyClass myOtherObjectReference = myObject;

Each time a new reference is added, the reference count increases by one.  Each time
an object reference variable goes out of scope or is set to null, the reference
count decreases by one.

If the reference count is zero, the .NET Framework Runtime's Garbage Collector
removes the objet from memory at an indeterminate point in time in the future. You
can take control of the finalization process and even handle events just before the
object is removed.  See: "deterministic finalization".


Understanding the .NET Framework and Compilation (CS-ASP_039)
=============================================================
The .NET Framework consists of:

- Runtime (Common Language Runtime, CLR) "protective bubble", manages memory,
protects the user's machine, etc.

- .NET Framework Class Library (FCL, Base Class Library, BCL) - thousands
of classes built by Microsoft for every imaginable purpose.

- Compilers (C# compiler, VB compiler) - turns your human readable source code into
Microsoft Intermediate Language (MSIL, IL) and packaged into a .NET assembly
(.exe - executable, or .dll - class library)

- Many other tools and features

Initial compilation to Intermediate Language, then a second compilation 
JIT - Just In Time compilation - an optimized version of the assembly for the
specific hardware and software. Happens at first request on that computer.


Undersatnding Namespaces and the unsing Directive (CS-ASP_040)
===============================================================
Namespaces disambiguate class names inside of class libraries or applications.

You must rreference class names by their full name:

System.Text.Stringbuilder sb = new System.Text.StringBuilder();

... or, you can employ a using directive at the top of the code file to
instruct the compiler to look in those namespaces to find the class
 that is referenced.

using System.Text;
. . . 
StringBuilder sb = new StringBuilder();

You must always do this if the code you're writing is outside of 
the namespace of the class you want to use, even if it's in the same
project.

Default namespace defined in Project Properties (right-clicking on 
Poject name in Solution Explorer, select Properties ...)

Creating Class Libraries and Adding Reference to Assemblies (CS-ASP_041)
========================================================================
Class Library project - creates a .dll that can be referenced in other projects.

Add a Reference - the FCL is split into tiny pieces, and you must reference
the assemblies that contain the parts of the library you want to use.

Right-click project's References node in Solution Explorer, select Add Reference



Accessibility Modifiers, Fields and Properties (CS-ASP_042)
============================================================
http://v.gd/access

Public - Class or member can be accessed by any code
Private - Class or member can only be accessed by parent class
Protected - Class or member can only be accessed by parent class or derived class
Internal - Class or member can only be accessed by code inside the same assembly

Classes are internal by default
Methods and properties are private by default

Encapsulation - hiding implementation behind npublic interfaces, reduces coupling
increases plug-ability / resuability, maintainability, etc.

private fields have two purposes:
(1) reference to object or variable that used for internal implementation of class
(2) hold the state of an object, backing field for public property

propfull [tab] [tab]

private int myField;
public int MyProperty
{
  get { return myField; }
  set { 
     if (value > 100)
       myField = value;
     else
       // tell the caller that they can't do this
  }
}

Full property definition and private fields to control
access to private fields / state of the object.


propg [tab] [tab]

public int MyProperty { get; private set; }

Restricts setting of property to just the class' internal implementation


Creating Constructor Methods (CS-ASP_043)
=========================================
Constructors are called at the moment of instantiation.
Used to put the new instance of the class into a valid state.
public class Foo
{
  public Foo() 
  {
   ...
  }
}
Whether you define it or not, there's a default constructor.
You can override the default (no input parameters) or 
overload the constructor to allow the user to set the new 
instance to a valid state.


Naming Conventions for Identifiers (CS-ASP_044)
===============================================
PascalCase - public
camelCase - private, protected

Public classes, methods and properties - PascalCase
Private helper methods, input parameters - camelCase
Locally scoped variables - camelCase
Private field - camelCase prefixed w/ underscore: _firstName

Choose long, memorable, understandable names
that convey meaning / intent.



Static versus Instance Members (CS-ASP_045)
===========================================
Static members - no instance of the class required to call method

Instance member - must create an instance w/ new keyword to call
methods and properties

Can mix both in the same class, but can't reference instance
members from inside of static members.

Classes can be decaoted w/ static keyword ... all members
must be static, can't create a new instance of that class,

System.Math

http://v.gd/static

